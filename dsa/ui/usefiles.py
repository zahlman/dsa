# Copyright (C) 2018-2020 Karl Knechtel
# Licensed under the Open Software License version 3.0

from ..errors import UserError
from pathlib import Path
from epmanager import entrypoint


class MANDATORY_PATH(UserError):
    """The path to the system libraries may not be removed"""


_LIBRARY = Path(__file__).absolute().parent.parent / 'library'
_EXTFILE = _LIBRARY / 'libpaths.txt'


def _save_paths(paths):
    with open(_EXTFILE, 'w') as f:
        f.write('# This file is automatically generated. Do not edit.\n')
        f.write('\n')
        for path in sorted(paths):
            f.write(f'{path}\n')


def _load_paths():
    try:
        with open(_EXTFILE) as f:
            return {
                line for line in (path.rstrip() for path in f)
                if line != '' and not line.startswith('#')
            }
    except FileNotFoundError:
        result = {'.'}
        _save_paths(result)
        return result


def fixed_roots():
    return [_LIBRARY / r for r in _load_paths()]


@entrypoint(
    name='dsa-use',
    description='Data Structure Assembler - add library path',
    path='path to use (should be absolute)'
)
def use_files(path):
    paths = _load_paths()
    if path not in paths:
        paths.add(path)
        _save_paths(paths)


@entrypoint(
    name='dsa-drop',
    description='Data Structure Assembler - remove library path',
    path='path to stop using (should be absolute)'
)
def drop_files(path):
    MANDATORY_PATH.require(path != '.')
    paths = _load_paths()
    if path in paths:
        paths.remove(path)
        _save_paths(paths)
