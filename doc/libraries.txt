This work is licensed under the Creative Commons
Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy
of this license, visit https://creativecommons.org/licenses/by-nc-sa/4.0/ .

Definitions
-----------

A **language** is a Python class instance that encapsulates the logic and
business rules needed to assemble or disassemble binary data with DSA.

A **library** is a folder with data used by DSA to construct languages. It
must have a configuration file named `targets.toml` at its root, and should
have one or more of the following folders:

    * `codec_code`: contains .py files with logic for loading codecs.
    * `codec_data`: contains .txt files with codec configuration data.
    * `filters`: contains .py files implementing filter logic.
    * `interpreters`: contains .py files implementing custom logic for
      assembling or disassembling a single chunk of the source data.
    * `structgroups`: contains .txt files that specify data structures used to
      create interpreters which use the standard logic.
    * `types`: contains .txt files that specify data type used to create
      interpreters which use the standard logic.

Any other folder contents will be ignored for these purposes.

The **system library** is a library within the DSA installation, located in
the `library/` subdirectory.

A **search path** is a fragment of a glob pattern used for finding files -
that is, folder names and/or shell wildcards, separated by forward slashes.

A **target** is a symbolic name used to filter the contents of library
folders. It specifies relative paths within each of the top-level folders of
the library that will be searched for .py or .txt files (according to which
top-level folder it is). When constructing a language, the same set of
relative paths is used in each top-level folder, of each library used.

Syntax of `targets.toml`
------------------------

The targets.toml file should not contain any tables. It should simply be a
mapping of targets to search paths, for example: `A = ["A/**", ""]`. This
denotes that the language corresponding to the `A` target will use files at
the top level of each of the above-named source folders, and also recursively
search within the `A` subdirectory (if any) of those folders. Any patterns
specified for a target named `*` will be used for all other targets as well.

In detail: when DSA searches for, for example, filters with which to construct
a language, given a search path of `A/**` it will construct the glob pattern
`filters/A/**/*.py`, evaluated recursively relative to the library root. All
files matching the glob will be used to construct filters.

This targeting system allows you to maintain related library files for
multiple disassembly projects. Suppose for example that you have to binary
files A and B, which require both common and binary-specific library
configuration. You can set up a library with a folder structure along the
lines of:

    my_library/
        targets.toml
        codec_code/
            common_loader.py
            A/
                A_loader.py
            B/
                B_loader.py
        codec_data/
            common_codecs.txt
            A/
                A_codecs.txt
            B/
                B_codecs.txt
        # etc. for filters, interpreters, structgroups and types

and then have targets.toml contain:

    A = ['', 'A/**']
    B = ['', 'B/**']

or alternatively:

    * = ['']
    A = ['A/**']
    B = ['B/**']

Using libraries and targets with `dsa` and `dsd` commands
---------------------------------------------------------

The `dsa` and `dsd` commands support the following flag options:

-l, --libraries: provide one or more symbolic names of libraries
-p, --paths: provide the path to one or more library root folders
-t, --target: provide a target (default is *)

By default, only one symbolic library name is defined: `sys`, which refers to
the built-in system library. If neither `-l` nor `-p` options are provided,
the system library will be used; otherwise, it must be added back explicitly
if you want to use it.

If a target is specified, a search path is looked up separately for each
library and applied when gathering files from that library.

Continuing from the above example, specifying `-l path/to/my_library -t A`
will result in `common_loader.py`, `A_loader.py`, `common_codecs.txt` and
`A_codecs.txt` being used to construct the language, but **not** `B_loader.py`
or `B_codecs.txt` (since they are not on any of the search paths).

This is a good way to avoid definition conflicts. Suppose that the A and B
projects operate on two separate binaries that contain data that's
semantically equivalent, but laid out differently in each. By using the
targeting system, you can bring in only the definitions relevant to the binary
you're working on.

dsa-use and dsa-drop
--------------------

DSA maintains an internal mapping from symbolic library names to (absolute)
paths to their root folders. It starts out by mapping the name `sys` to the
system library, so that you don't need to know the path to that library in
order to use it.

The `dsa-use` utility adds a name to this mapping, and `dsd-drop` removes a
name. Note that the `sys` name may not be removed or re-mapped. `dsa-use`
resolves paths at the time of execution, and stores an absolute path.

For example, suppose you have library folders and a `targets.toml` in your
project's root directory, and you have been specifying this library for `dsa`
and `dsd` using `-p .`; and now you wish to relocate the library (perhaps
because it is now applicable to multiple projects). Instead of typing in the
new path each time, you can `dsa-use my_project new/path/to/library`, and
subsequently run `dsa` and/or `dsd` using `-l my_project`.
