This work is licensed under the Creative Commons
Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy
of this license, visit https://creativecommons.org/licenses/by-nc-sa/4.0/

Overview
--------

DSA uses plain text files for its type definitions, structgroup definitions,
codec data and disassembly listings. A `.txt` filename extension is
recommended for these files, and UTF-8 encoding is assumed. This document
describes common rules by which the files are preprocessed and tokenized.

**Please note that these rules are subject to change in the near future.**

The interpretation of the resulting tokens is discussed in separate
documentation. Please see:

* `interpreters.txt` for type and structgroup definition files

* `output.txt` for disassembly listings

* `codecs.txt` for codec data files

Preprocessing
-------------

The file, conceptually, undergoes some preprocessing before being tokenized
(though this is done at the same time, in a single pass over the data):

* Everything on a source line of the file from a `#` character onwards, as
  long as it appears outside of a quoted string, is ignored as a comment.

* Lines starting with `+` are treated as a continuation of the previous line.
  The `+` sign is removed. The continuation will be tokenized separately; it
  is not possible to split a token across lines this way.

* Leading and trailing whitespace are stripped; if the line had leading
  whitespace, this is noted.

* Lines (unless they are a continuation) starting with `!`, are identified as
  "meta" lines; lines starting with whitespace are identified as "indented"
  lines. Other lines are identified as "unindented" lines.

Tokenization
------------

The following rules apply to tokenize the resulting preprocessed lines:

* Each token conceptually consists of one or more "parts", and may or may not
  be marked as a "label".

* Whitespace is required between tokens.

* Tokens may be either quoted strings, "bracketed" tokens, or "plain" tokens.
  Quoted-string tokens may use either single or double quotes, and are
  interpreted as though they were Python literals (except that string prefixes
  and triple-quotes are not supported).

* Quoted-string tokens may not be labels, and may have only a single part.
  Bracketed and plain tokens are prefixed with `@` to denote that they are
  labels. `@` is not a valid token by itself.

* The remainder of a plain token is any text not including whitespace, a
  square bracket, a single or double quotation mark, `#` or `@`. Note in
  particular that `!` *is* allowed (except of course that, at the beginning of
  a line, it will be interpreted as a marker for meta lines). The remainder of
  a bracketed token may also contain quotation marks and whitespace.

* The parts of bracketed and plain tokens are separated using `:`, `,` or a
  mixture of the two (these are treated as equivalent in all regards).

* Whitespace within each part of a bracketed token is normalized: leading and
  trailing whitespace is removed, and internal whitespace sequences are
  replaced with a single space character each.

In general, when part of a token is expected to represent an integer value, it
is interpreted as if it were passed to the built-in `int` with a `base` of
`0`. That is to say, they may be written in decimal, or in binary with a `0b`
prefix, or in octal with a `0o` prefix, or in hexadecimal with a `0x` prefix.
However, conversion of the value *does not happen at this point*. This allows
for custom types to override the interpretation of the value. For example, the
built-in `hexdump` type uses this to interpret `42` as 0x42, i.e., 66.

Examples
--------

1. Consider a file containing:

!first @second#third
+!fourth

This is treated as a single line, equivalent to:

first @second !fourth

Note that the comment is stripped despite the lack of whitespace, and that
`!fourth` is treated as a separate token. The `+` must appear at the start of
the line, with no leading whitespace, to have this line-continuation effect.

The line is then processed into three tokens, each with a single part:
`first`, `second` and `!fourth`. The `second` token is considered a label.

2. Consider a file containing:

+![1 ,  2  : 3]
[!4 :  5  , 6] !7 ,  8  : 9

The first line is meta, and the second is not. The first line has a single
token with parts `1`, `2` and `3`, after whitespace normalization. Note that
`+` *is* permitted on the first (non-empty, non-comment) line; it results in a
line number of 0 being reported, since it is "continuing" an empty line from
before the start of the file. (This somewhat strange behaviour was preserved
when it was noticed in testing, in case it might be useful later.)

The second line has *six* tokens. The first has parts `!4`, `5` and `6`
(note the equivalence of `,` and `:`). The `!7`, `8` and `9` are
straightforward: they are plain tokens with a single part each, as they
contain no special characters (aside from the `!`, which only has special
meaning at the beginning of a line). The `,` and `:` are also plain tokens by
themselves; since they are also separator characters, those tokens each have
two parts, both of which are empty.

3. Consider a file containing:

[!example] "double-quoted    \toke\ns [aren't weird]"
![] @[] 'single-quoted:tokens]@!#[aren\'t:weird,either'

Although a line cannot start with a plain token that starts with `!`, a
bracketed token can be used to "escape" the `!` character (even if the token
should only have a single part and no internal whitespace). `[]` can also be
used to make empty, single-part tokens, with or without a label (recall that
`@` is explicitly disallowed as a token by itself, and of course a token must
have some text to it).

The quoted-string tokens may contain any character, even characters with
special syntax meaning. Whitespace is preserved and the token is not split
into parts. The string is interpreted as a Python string literal, so in this
example the text of the double-quoted token includes a literal tab and
newline. A backslash escape is used for the apostrophe in the single-quoted
token; this again works as it would in Python (or many other programming
languages).

4. Here are some examples of indented lines:

    indented
 !also     
+indented
     forsooth, indented

The amount of indentation does not matter, and neither does it matter if tabs
or spaces (or both) are used; all of these are simply recorded as indented
lines. Trailing whitespace is also irrelevant. Note that in error messages,
the last line of this example would be reported as line 4, even though the
previous line had a continuation. Because line 2 is indented, the `!` is not
treated as a meta line marker, and becomes part of the `!also` token.

5. Here are some examples of invalid lines:

[first][second]
first @ second
[first
+second]

The first line fails because there is no whitespace between the tokens; the
second line fails because the empty label is invalid. The fourth line is not
able to continue the token from the third line; so each line, considered in
isolation, has an unmatched square bracket.
